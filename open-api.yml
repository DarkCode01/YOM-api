openapi: 3.0.0
info:
  description: Api REST to manage all data of YOM projecte.
  version: "1.0.0"
  title: YOM - API

  contact:
    name: Jose Segura (Darkcoder)
    email: j0s3s3gur4@gmai.com
    url: https://github.com/darkcode01
  
  license:
    name: MIT

paths:
  /api/auth/token:
    post:
      tags:
        - Authorization
      summary: To get tokens by credentials of an account
      operationId: token_access
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                  format: password
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
                properties:
                  refresh:
                    type: string
                    format: JWTToken
                  access:
                    type: string
                    format: JWTToken
        400:
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Unauthorized
  /api/auth/refresh:
    post:
      tags:
        - Authorization
      summary: To get a new token access by refresh token.
      operationId: token_refresh
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh:
                  type: string
                  format: JWTToken
      responses:
        200:
          content:
            application/json:
              schema:
              type: object
              properties:
                access:
                  type: string
        400:
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/BadRequest'
  /api/auth/verify:
    post:
      tags:
        - Authorization
      summary: To validate token access
      operationId: token_access_verify
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                access:
                  type: string
                  description: Token access para la verificai√≥n.
      responses:
        200:
          description: Success Verification token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  is_valid:
                    type: boolean
        401:
          description: Unauthorized
  /api/accounts:
    get:
      security:
        - JWTAuth: []
      tags:
        - Account
      summary: Get all account.
      operationId: accounts_all
      produces:
        - "application/json"
      responses:
        200:
          description: All accounts found on db.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        500:
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/InternalServerError'
  /api/accounts/{objectID}:
    get:
      security:
        - JWTAuth: []
      tags:
        - Account
      summary: To get info of account by yours obectId (_id)
      operationId: accounts_info
      produces:
        - application/json
      parameters:
        - name: objectID
          in: path
          required: true
          schema:
            type: string
            format: ObjectID
            description: (_id) of account to get info.
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Account'
        401:
          description: Unauthorized
        500:
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/InternalServerError'
  /api/accounts/:
    post:
      tags:
        - Account
      summary: To registrare a new account.
      operationId: accounts_create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                firts_name:
                  type: string
                last_name:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        201:
          description: Account created with success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        400:
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/BadRequest'
        500:
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/InternalServerError'
  /api/accounts/{objectID}/:
    patch:
      security:
        - JWTAuth: []
      tags:
        - Account
      summary: To update information of an Account.
      operationId: accounts_update
      produces:
        - application/json
      parameters:
        - name: objectID
          in: path
          required: true
          schema:
            type: string
            format: ObjectID
            description: (_id) of account to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                firts_name:
                  type: string
                last_name:
                  type: string
                email:
                  type: string
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Account'
        401:
          description: Unauthorized
        500:
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/InternalServerError'
  /api/accounts/{objectID}/status:
    patch:
      security:
        - JWTAuth: []
      tags:
        - Account
      summary: For change status of account (Active / Desactive)
      operationId: accounts_desactivate
      produces:
        - application/json
      parameters:
        - name: objectID
          in: path
          required: true
          schema:
            type: string
            format: ObjectID
            description: (_id) of account to desactivate.
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Account'
        401:
          description: Unauthorized
        500:
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/InternalServerError'

components:
  securitySchemes:
    JWTAuth:
      type: apiKey
      in: header
      name: Authorization 

  schemas:
    Account:
      type: object
      properties:
        _id:
          type: string
          format: ObjectID
        username:
          type: string
        firts_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        type:
          type: string
          enum: [creator, emplyee]
          example: creator
        is_active:
          type: boolean
        password:
          type: string
          format: password
        email_confirmed:
          type: boolean
        manager:
          type: string
          format: ObjectID
          description: ObjectId (_id) of market to manage
          $ref: '#/components/schemas/Market'
        employed:
          type: string
          format: ObjectID
          description: ObjectID (_id) of market that account work or is employed.
          $ref: '#/components/schemas/Market'
        products_published:
          type: array
          items:
            $ref: '#/components/schemas/Product'
    Market:
      type: object
      properties:
        _id:
          type: string
          format: ObjectID
        name:
          type: string
        description:
          type: string
        cover:
          type: string
          format: ObjectID
          $ref: '#/components/schemas/Image'
        address:
          type: string
          format: location
        tel:
          type: string
          format: telephone
        managers:
          type: array
          items:
            $ref: '#/components/schemas/Account'
        employes:
          type: array
          items:
            $ref: '#/components/schemas/Account'
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
    Category:
      type: object
      properties:
        _id:
          type: string
          format: ObjectID
        name:
          type: string
        description:
          type: string
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
    Product:
      type: object
      properties:
        _id:
          type: string
          format: ObjectID
        name:
          type: string
        description:
          type: string
        images:
          type: array
          items:
            $ref: '#/components/schemas/Image'
        price:
          type: number
        category:
          type: string
          format: ObjectID
          $ref: '#/components/schemas/Category'
        saler:
          type: string
          format: ObjectID
          $ref: '#/components/schemas/Account'
        market:
          type: string
          format: ObjectID
          $ref: '#/components/schemas/Market'
    Image:
      type: object
      properties:
        _id:
          type: string
          format: ObjectID
        public_id:
          type: string
          description: Id of image on Cloudinary service.
        format:
          type: string
        url:
          type: string
          format: URL
          description: URL (http) where image is hosted.
        secure_url:
          type: string
          format: URL
          description: URL (https) where image is hosted.
    
    # Errores schemes
    Error:
      type: object
      properties:
        message:
          type: string
          description: message of error.
    BadRequest:
      type: object
      properties:
        statusCode:
          type: string
          description: Contain status code of error.
        message:
          type: string
          description: Message error in one line.
        error:
          type: array
          items:
            $ref: '#/components/schemas/BodyValidationError'
    InternalServerError:
      type: object
      properties:
        statusCode:
          type: string
          description: Contain status code of error.
        message:
          type: string
          description: Message error in one line.
        error:
          $ref: '#/components/schemas/Error'
    BodyValidationError:
      type: object
      properties:
        value:
          description: Value of param.
        msg:
          type: string
          description: Message why value is invalid.
        param:
          type: string
        location:
          type: string